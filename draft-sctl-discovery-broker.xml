<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<!--
Check output with <http://tools.ietf.org/tools/idnits/>
-->

<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.35) -->

<!-- give errors regarding ID-nits and DTD validation -->
<?rfc strict="yes" ?>

<!-- control the table of contents (ToC) -->
<!-- generate a ToC -->
<?rfc toc="no"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<?rfc tocdepth="3"?>

<!-- control references -->
<!-- use anchors instead of numbers for refs, i.e, [RFC2119] instead of [1] -->
<?rfc symrefs="yes"?>
<!-- sort the reference entries alphabetically -->
<?rfc sortrefs="no" ?>

<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<!-- do not start each main section on a new page -->
<?rfc compact="yes" ?>
<!-- keep one blank line between list items -->
<?rfc subcompact="no" ?>

<!-- encourage use of "xml2rfc" tool -->
<?rfc rfcprocack="yes" ?>
<!-- end of list of popular I-D processing instructions -->

<rfc category="info" docName="draft-sctl-discovery-broker-00" ipr="trust200902">

  <front>
    <title abbrev='Service Discovery Broker'>Service Discovery Broker</title>

    <author initials='S.' surname='Cheshire' fullname='Stuart Cheshire'>
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino</city>
          <region>California</region>
          <code>95014</code>
          <country>USA</country>
        </postal>
        <phone>+1 (408) 996-1010</phone>
        <email>cheshire@apple.com</email>
      </address>
    </author>

    <author initials="T" surname="Lemon" fullname="Ted Lemon">
      <organization>Nominum, Inc.</organization>
      <address>
        <postal>
          <street>800 Bridge Parkway</street>
          <city>Redwood City</city>
          <region>California</region>
          <country>United States of America</country>
          <code>94065</code>
        </postal>
        <phone>+1 650 381 6000</phone>
        <email>ted.lemon@nominum.com</email>
      </address>
    </author>

    <date year='2017' month='July' day='2'/>
    <area>Internet</area>
    <workgroup>Internet Engineering Task Force</workgroup>
    <keyword>DNS-Based Service Discovery</keyword>
    <keyword>RFC</keyword>
    <keyword>Request for Comments</keyword>
    <keyword>I-D</keyword>
    <keyword>Internet-Draft</keyword>
    <abstract>
      <t>DNS-Based Service Discovery allows clients to discover available
      services using unicast DNS queries.
      In simple configurations these unicast DNS queries go directly to the
      appropriate authoritative server(s).
      In large networks that have complicated topology, or<vspace />
      many client devices, or both,
      it can be advantageous to have an intermediary between the clients
      and authoritative servers.
      This intermediary, called a Discovery Broker, serves several purposes.<vspace />
      A Discovery Broker can reduce load on both the servers and the clients,
      and gives the option of presenting clients with service discovery
      organized around logical, rather than physical, topology.</t>
    </abstract>
  </front>

  <middle>

    <section title="Introduction">
      <t><xref target="RFC6763">DNS-Based Service Discovery (DNS-SD)</xref>
      is a component of Zero Configuration Networking
      <xref target="RFC6760"/> <xref target="ZC"/> <xref target="Roadmap"/>.</t>

      <t>DNS-SD operates on a single network link (broadcast domain)
      using <xref target="RFC6762">Multicast DNS</xref>.
      DNS-SD can span multiple links using unicast DNS.</t>

      <t>In the <xref target="RFC6763">DNS-SD specification</xref> section 11,
      “Discovery of Browsing and Registration Domains (Domain Enumeration)”,
      describes how client devices are automatically configured with the
      appropriate unicast DNS domains in which to perform their
      service discovery queries.
      When used in conjunction with a <xref target="DisProx">Discovery Proxy</xref>
      this allows clients to discover services on remote links, even
      when the devices providing those services support only the basic
      Multicast DNS form of DNS-Based Service Discovery.
      A Discovery Broker is a companion technology that operates
      in conjunction with existing authoritative DNS servers
      (such as a <xref target="DisProx">Discovery Proxy</xref>)
      and existing clients performing service discovery
      using unicast DNS queries.</t>
    <?rfc needLines="25" ?>
    </section>

    <section title="Problem Statement">
      <t>The following description of how a Discovery Broker works is
      illustrated using the example of a long rectangular office building.
      The building is large enough to have hundreds or even thousands
      of employees working there, the network is large enough that
      it would be impractical to operate it as a single link
      (a single broadcast domain, with a single IPv4 subnet or IPv6 network prefix).</t>

      <t>Suppose, for this example, that the network is divided into twelve
      separate links, connected by routers.
      Each link has its own IPv6 network prefix.
      The division of the network into twelve sections of roughly equal size
      is somewhat arbitrary, and does not necessarily follow any physical
      boundaries in the building that are readily apparent to its inhabitants.
      Two people in adjacent offices on the same corridor may have
      Ethernet ports connected to different links.
      Indeed, two devices in the same office,
      connected to the company network using secure Wi-Fi,
      may inadvertently associate with different access points,
      which happen to be connected to different wired links with different
      IPv6 network prefixes.</t>

      <t>If this network were operated the way most networks have historically been operated,
      it would use only Multicast DNS Service Discovery, and adjacent devices
      that happen to connect to different underlying links would be unable
      to discover each other. And this would not be a rare occurrence.
      Since this example building contains eleven invisible boundaries
      between the twelve different links, anyone close to one of those
      invisible boundaries will have a population of nearby devices
      that are not discoverable on the network, because they’re on a different link.
      For example, a shared printer in a corridor outside one person’s office may
      not be discoverable by the person in the very next office.</t>

      <t>One path to solving this problem is as follows:
        <list style='numbers'>
          <t>Install a <xref target="DisProx">Discovery Proxy</xref> on each of the twelve links.</t>
          <t>Create twelve named subdomains, such as,
          “services1.example.com”,
          “services2.example.com”,
          “services3.example.com”, and so on.</t>
          <t>Delegate each named subdomain to the corresponding Discovery Proxy on that link.</t>
          <t>Create entries in the ‘ip6.arpa’ reverse mapping zone directing clients on each
          link to perform service discovery queries in the appropriate named subdomains,
          as documented in section 11 of the <xref target="RFC6763">DNS-SD specification</xref>.</t>
        </list>
      </t>

      <t>In step 4 above, it might be tempting to add only a single record in each
      reverse mapping domain referencing the corresponding services subdomain.
      This would work, but it would only facilitate each client discovering
      the same services it could already discover using
      <xref target="RFC6762">Multicast DNS</xref>.
      In some cases even this is useful, such as when using Wi-Fi Access Points
      with multicast disabled for efficiency.
      In such cases this configuration would allow wireless clients to discover services
      on the wired network segment without having to use costly Wi-Fi multicast.</t>

      <t>But for this example we want to achieve more than
      just equivalency with Multicast DNS.</t>

      <t>In this example, each reverse mapping domain is populated
      with the name of its own services subdomain, plus its neighbors.
      The reverse mapping domain for the first link has two “lb._dns-sd._udp” PTR records,
      referencing “services1.example.com” and “services2.example.com”.
      The second link references services1, services2, and services3.
      The third link references services2, services3, and services4.
      This continues along the building, until the last link,
      which references services11 and services12.</t>

      <t>In this way a “sliding window” is created, where devices on
      each link are directed to look for services both on that link and
      on its two immediate neighbors.
      Depending on the physical and logical topologies of the building
      and its network, it may be appropriate to direct clients to query
      in more than three services subdomains.
      If the building were a ring instead of a linear rectangle,
      then the network topology would “wrap around”,
      so that links 1 and 12 would be neighbors.</t>

      <t>This solves the problem of being unable to discover a nearby
      device because it happens to be just the other side of one of the
      twelve arbitrary invisible network link boundaries.</t>

      <t>For many cases this solution is adequate,
      but there is an issue to consider.
      In the example above, a client device on link 5 has
      TCP connections to three Discovery Proxies, on links 4, 5 and 6.
      In a more complex setup each client could have many more TCP
      connections to different Discovery Proxies.</t>

      <t>Similarly, if there are a many clients, each Discovery Proxy could be
      required to handle thousands of simultaneous TCP connections from clients.</t>

      <t>The solution to these two problems is the Discovery Broker.</t>

    </section>

    <section title="Discovery Broker Operation">

      <t>The Discovery Broker is an intermediary between the client
      devices and the Discovery Proxies.
      It is a kind of multiplexing crossbar switch.
      It shields the clients from having to connect to multiple
      Discovery Proxies, and it shields the Discovery Proxies from
      having to accept connections from thousands of clients.</t>

      <t>Each client needs only a single TCP connection to a single Discovery Broker,
      rather than multiple TCP connections directly to multiple Discovery Proxies.
      This eases the load on client devices, which may be mobile and battery-powered.</t>

      <t>Each Discovery Proxy needs to support connections to at most
      a small number of Discovery Brokers.
      The burden of supporting thousands of clients is taken by the
      Discovery Broker, which can be a powerful server in a data center.
      This eases the load on the Discovery Proxy, which may be implemented in a device
      with limited RAM and CPU resources, like a Wi-Fi access point or IP router.</t>

      <t>Recall that a <xref target="DisProx">Discovery Proxy</xref> is a special kind
      of authoritative DNS server <xref target="RFC1034"/> <xref target="RFC1035"/>.
      Externally it behaves like a traditional authoritative DNS server,
      except that instead of getting its zone data from a manually-administered
      zone file, it learns its zone data dynamically as a result of performing
      Multicast DNS queries on its local link.</t>

      <?rfc subcompact="yes" ?>
      <t>A Discovery Broker is a similar concept, except that it learns its
      zone data dynamically as a result of performing *unicast* DNS queries.
      For example, a Discovery Broker could be configured so that the answer
      for “&lt;something&gt;.discovery5.example.com” is obtained by
      performing corresponding unicast DNS queries:<list style='hanging'>
          <t>&lt;something&gt;.services4.example.com</t>
          <t>&lt;something&gt;.services5.example.com</t>
          <t>&lt;something&gt;.services6.example.com</t>
        </list>
      and then returning the union of the results as the answer.
      The rdata of the returned answers is not rewritten or modified in
      any way by the Discovery Broker.</t>
      <?rfc subcompact="no" ?>

    <?rfc needLines="10" ?>
    </section>

    <section title="Protocol Transparency">

      <t>From the point of view of an authoritative DNS server such
      as a Discovery Proxy, the protocol a Discovery Broker uses to
      make requests of it is the exact same DNS protocol that any other
      client would use to make requests of it (which may be traditional
      one-shot DNS queries <xref target="RFC1034"/> <xref target="RFC1035"/>
      or long-lived DNS <xref target="Push">Push Notifications</xref>).</t>

      <t>A Discovery Broker making requests is no
      different from any other client making requests.
      The fact that the Discovery Broker may be making a single request
      on behalf of thousands of clients making the same request, thereby
      shielding the Discovery Proxy from excessive traffic burden,
      is invisible to the Discovery Proxy.</t>

      <t>This means that an authoritative DNS server such as a Discovery Proxy
      does not have to be aware that it is being queried by a Discovery Broker.
      In some scenarios a Discovery Proxy may be deployed with clients
      talking to it directly; in other scenarios the same Discovery Proxy
      product may be deployed with clients talking via a Discovery Broker.
      The Discovery Proxy simply answers queries as usual in both cases.</t>

      <t>Similarly, from the point of view of a client, the protocol it uses
      to talk to a Discovery Broker is the exact same DNS protocol it uses
      to talk to a Discovery Proxy or any other authoritative DNS server.</t>

      <t>This means that the client does not have to be aware that it is using
      a Discovery Broker. The client simply sends service discovery queries as usual,
      according to configuration it received from the network or otherwise,
      and receives answers as usual. A Discovery Broker may be employed to shield
      a Discovery Proxy from excessive traffic burden, but this is transparent to a client.</t>

      <t>Another benefit for the client is that by having the Discovery
      Broker query multiple subdomains and aggregate the results, it saves
      the client from having to do multiple separate queries of its own.</t>

    <?rfc needLines="20" ?>
    </section>

    <section title="Logical vs. Physical Topology">

      <t>In the example so far, we have focussed on facilitating discovery
      of devices and services that are physically nearby.</t>

      <t>Another application of the Discovery Broker is to facilitate discovery
      of devices and services according to other logical relationships.</t>

      <t>For example, it might be considered desirable for the company’s two
      file servers to be discoverable company-wide, but for its many printers
      to only be discovered (by default) by devices on nearby network links.</t>

      <t>As another example, company policy may block access to certain resources
      from Wi-Fi; in such cases it would make sense to implement consistent
      policies at the service discovery layer, to avoid the user frustration of
      services being discoverable on Wi-Fi that are not usable from Wi-Fi.</t>

      <t>Such policies, and countless variations thereon, may be implemented
      in a Discovery Broker, limited only by the imagination of the vendor
      creating the Discovery Broker implementation.</t>

    <?rfc needLines="30" ?>
    </section>

     <section title="Recursive Application">

      <t>Due to the Protocol Transparency property described above,
      multiple Discovery Brokers may be “stacked” in whatever combinations are useful.
      A Discovery Broker makes queries in exactly the same way a client would,
      and a Discovery Broker accepts queries in exactly the same way a Discovery Proxy
      (or other authoritative DNS server) would.
      This means that a Discovery Broker talking to another Discovery
      Broker is no different from client-to-broker or broker-to-proxy
      communication, or indeed, direct client-to-proxy communication.
      The arrows in the chart below are all instances of the same communication protocol.
        <list style='hanging'>
          <t>client -> proxy</t>
          <t>client -> broker -> proxy</t>
          <t>client -> broker -> broker -> proxy</t>
        </list>
      </t>

      <t>This makes it possible to combine Discovery Brokers with different functionality.
      A Discovery Broker performing physical aggregation could be used in conjunction with
      a Discovery Broker performing policy-based filtering, as illustrated below:</t>

      <figure><artwork>
------------                       ---------------     -------------
| Ethernet |          -->          | Aggregating | --> | Discovery |
|  Client  |                       |   Broker    |     |   Proxy   |
------------                       ---------------     -------------

------------     -------------     ---------------     -------------
|  Wi-Fi   | --> | Filtering | --> | Aggregating | --> | Discovery |
|  Client  |     |  Broker   |     |   Broker    |     |   Proxy   |
------------     -------------     ---------------     -------------
</artwork></figure>

      <t></t>

    <?rfc needLines="20" ?>
    </section>

    <section title="Security Considerations">

      <t>Discovery (or non-discovery) of services is not a substitute for suitable access control.
      Servers listening on open ports are generally discoverable via a brute-force port scan anyway;
      DNS-Based Service Discovery makes access to these services easier for legitimate users.</t>

    </section>

  </middle>

  <back>
    <references title="Informative References">
      <?rfc include="reference.RFC.1034" ?>
      <?rfc include="reference.RFC.1035" ?>
      <?rfc include="reference.RFC.6760" ?>
      <?rfc include="reference.RFC.6762" ?>
      <?rfc include="reference.RFC.6763" ?>
      <?rfc include="reference.I-D.cheshire-dnssd-roadmap" ?>
      <?rfc include="reference.I-D.ietf-dnssd-hybrid" ?>
      <?rfc include="reference.I-D.ietf-dnssd-push" ?>

      <reference anchor="ZC">
        <front>
          <title>Zero Configuration Networking: The Definitive Guide</title>
          <author initials="S." surname="Cheshire" fullname="Stuart Cheshire"/>
          <author initials="D.H." surname="Steinberg" fullname="Daniel H. Steinberg"/>
          <date year="2005" month="December"/>
        </front>
        <seriesInfo name="O'Reilly Media, Inc." value=""/>
        <seriesInfo name="ISBN" value="0-596-10100-7"/>
      </reference>

    </references>
  </back>
</rfc>
